.\" Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved.
.\" Copyright 2024 OmniOS Community Edition (OmniOSce) Association.
.Dd October 1, 2024
.Dt PKGMOGRIFY 1
.Os
.Sh NAME
.Nm pkgmogrify
.Nd Image Packaging System manifest transmogrifier
.Sh SYNOPSIS
.Nm
.Op Fl vi
.Oo Fl I Ar includedir Oc Ns \&...
.Oo Fl D Ar macro Ns Cm = Ns Ar value Oc Ns \&...
.Op Fl O Ar outputfile
.Op Fl P Ar printfile
.Oo Ar inputfile Oc Ns \&...
.Sh DESCRIPTION
.Nm
provides for programmatic editing of package manifests to simplify the typical
transformations needed when automating software builds and package publication.
It reads all of the input file(s) in the order specified and then will apply
any embedded directives found within as detailed in the Embedded Directives;
section below.
If no files are named, input will be read from
.Dv stdin .
.Sq \&-
can also be specified as a filename to use
.Dv stdin
as input, alone, or in combination with other files.
.Pp
.Nm
provides the following:
.Bl -bullet -width Ds
.It
Macro replacement to facilitate sharing of a single manifest across various
architectures and platforms.
.It
Inclusion of other manifests or manifest fragments such as standard components
and transforms.
.It
Transformation of package actions, including the modification, deletion, or
addition of action attributes.
.El
.Sh OPTIONS
The following options are supported:
.Bl -tag -width Ds
.It Fl \&-help , \&?
Display a usage message.
.It Fl D Ar macro Ns Cm = Ns value
Define
.Ar macro
as a macro, with the value
.Ar value .
This option can be specified multiple times.
Macros appear in the input file as
.Sy $(macro) .
Substitution is repeated until no more translations are found.
Common idioms include:
.Bl -bullet
.It
Elimination of lines in a manifest on other architectures by using an
architecture-specific tag at the beginning of the line:
.Pp
.D1 Sy $(sparc_ONLY) Ns file \&...
.Pp
When processing the SPARC architecture, this macro would be set to the empty
string.
When processing other architectures, this macro would be set to
.Sy #
on the command line, thus eliminating this action from the manifest on the
current architecture.
.It
Specifying platform-specific portions of path names, such as the name of the
64-bit architecture directory for executables and libraries:
.Pp
.D1 Cm file Cm path= Pa usr/bin/ Ns Sy $(ARCH64) Ns PA /cputrack No \&...
.Pp
These macros should be set to the desired value on the command line.
There are no predefined macro values.
.El
.It Fl I Ar includedir
Add the specified directory to the search path, both for files specified on the
command line and for embedded include directives.
This option can be specified multiple times.
.It Fl O Ar outputfile
Write manifest output to the specified file.
The file is not written if an error occurs or if a transform directive causes
an abort operation.
By default, manifest output is written to
.Dv stdout .
.It Fl P Ar printfile
Write output resulting from transform directive print operations to the
specified file.
The file is not written if an error occurs or if a transform directive causes
an abort operation.
By default, print output is written to
.Dv stdout .
.It Fl i
Ignore include directives in files.
Only files specified on the command line
.Pq or Dv stdin
are processed .
.It Fl v
Write comments into the output manifest showing the effect of transforms.
This information can aid in debugging.
.El
.Sh EMBEDDED DIRECTIVES
Two types of directives are supported in manifest files: include directives and
transform directives.
.Pp
Include directives are of the form:
.Pp
.D1 Cm <include Ar file Ns Cm >
.Pp
This directive causes
.Nm
to search for a file named
.Ar file
first in the current directory and then in the directories specified with the
.Fl I
option.
If found, the contents of the file are inserted into the manifest at the point
at which the directive is encountered.
If not found,
.Nm
exits with an error.
.Pp
Transform directives are of the form:
.Pp
.D1 Cm <transform Ar matching-criteria Cm -> Ar operation Ns Cm >
.Pp
These directives are accumulated until all inputs have been read into memory,
and then applied to the actions in the order in which they were encountered.
.Pp
Matching criteria are of the form:
.Pp
.D1 Oo Ar action-name \&... Oc Op Ar attribute Ns = Ns Ar value-regexp \&...
.Pp
At least one specified
.Ar action-name
must match.
Every specified
.Ar attribute
must match.
Action names and attributes are listed in "Actions" in the
.Xr pkg 7
man page.
The regular expression syntax used is that of Python.
For more information about Python regular expression syntax, see the
documentation at
.Lk http://docs.python.org/dev/howto/regex.html .
The regular expression is anchored at the beginning but not at the end.
Therefore, a regular expression matching files by their extensions must include
a leading
.Sq \&.*
and should include a trailing
.Sq \&$ .
.Pp
Multiple criteria can be specified, separated by spaces.
.Pp
The following operations are available:
.Bl -tag -width default
.It Ic add
Add a value to an attribute.
This operation takes two arguments.
The first argument is the name of the attribute, and the second is the value.
.It Ic default
Set the value of an attribute if it doesn't already exist.
This operation takes the same two arguments as the
.Ic add
operation.
.It Ic delete
Remove attribute values.
This operation takes two arguments.
The first argument is the name of the attribute.
The second argument is a regular expression to match the attribute values
deleted.
Unlike the regular expression used to match an action, this expression is
unanchored.
.It Ic drop
Discards this action.
.It Ic edit
Modifies an attribute of the action.
This operation takes three arguments.
The first argument is the name of the attribute, and the second is a regular
expression matching the attribute value.
The third argument is the replacement string substituted for the portion of the
value matched by the regular expression.
Unlike the regular expression used to match an action, this expression is
unanchored.
Normal regular expression backreferences, of the form \e1, \e2, and so on, are
available in the replacement string if groups are defined in the regular
expression.
.It Ic emit
Emit a line to the manifest output stream.
This must be a valid action string, empty
.Pq resulting in a blank line ,
or a comment
.Pq a Sy # No followed by arbitrary text .
.It Ic exit
Terminate manifest processing.
No manifest is output and no
.Ic print
operations are applied.
If one argument is given, it must be an integer, and it is used as the exit
code.
The default is 0.
If two arguments are given, the first is the exit code, and the second is a
message to be printed to
.Dv stderr .
.It Ic print
Print a message to the output file specified with
.Fl P .
.It Ic set
Set the value of an attribute.
This operation takes the same two arguments as the
.Ic add
operation.
.El
.Pp
All operations except for
.Ic delete
and
.Ic drop
take
.Pq possibly optional
arguments whose contents go to the output stream.
These strings can contain three different kinds of special tokens which allow
the output to contain information that is not based on a fixed transformation
of each action.
.Pp
The first kind of substitution allows the operation to refer to the values of
attributes of the current action by putting the name of the attribute inside
parentheses following a percent sign.
For example,
.Sy %(alias)
refers to the value of the action's
.Cm alias
attribute.
.Pp
Several synthetic attributes exist.
Two are unique to
.Nm :
.Bl -tag -width Ds
.It Cm pkg.manifest.filename
the name of the file in which the action was found.
.It Cm pkg.manifest.lineno
the line on which the action was found.
.El
.Pp
Three synthetic attributes are similar to ones used in
.Xr pkg 1 :
.Bl -tag -width Ds
.It Cm action.hash
the hash value of the action if the action carries a payload.
For actions with payloads, the
.Ic set
operation can change the hash of the action by operating on the
.Cm action.hash
attribute.
.It Cm action.key
the value of the key attribute.
.It Cm action.name
the name of the action.
.El
.Pp
If the attribute whose value is requested does not exist,
.Nm
exits with an error.
To prevent exiting with an error, follow the attribute name with
.Cm ;notfound=
and a value to substitute in place of the attribute value.
For example,
.Cm % Ns Pq Cm alias;notfound='no alias'
prints the value of the attribute
.Ic alias
if it exists, and prints
.Sy no alias
otherwise.
.Pp
If the attribute whose value is requested is multi-valued, each value is
printed, separated by spaces.
Similarly to the
.Cm notfound
token, the tokens
.Cm prefix ,
.Cm suffix ,
and
.Cm sep
can be used to change this behaviour.
The string denoted by
.Cm prefix
is prepended to each value, the string denoted by
.Cm suffix
is appended to each value, and
.Cm sep
is placed in between the suffix of one value and the prefix of the next.
.Pp
Similarly to action attributes,
.Nm
directives can reference package attributes using braces instead of
parentheses:
.Sy %{pkg.fmri} .
At the point at which the transform directive is applied, the attribute must
have been defined in a
.Ic set
action, or it is treated as
.Sy notfound ,
described above.
When the processing reaches the end of the manifest file describing the
package, the attributes are cleared for the next package.
The following synthetic attributes are also automatically generated from
.Sy pkg.fmri
when it is encountered:
.Bl -tag -width Ds
.It Cm pkg.fmri.name
The name of the package, without any scheme, publisher name or version
information, e.g.
.Sq library/libxml2 .
.El
.Pp
It is useful not only to reference package attributes as if they were action
attributes, but also to match on them, and even temporarily modify them.
Therefore a synthetic action name,
.Sy pkg ,
is available
.Po
only in the context of
.Nm
.Pc
for use in these situations.
.Pp
When
.Nm
finishes reading a manifest specified on the command line and that manifest
defined a
.Sy pkg.fmri
package attribute,
.Nm
creates this synthetic
.Sy pkg
action, whose attributes are the package's attributes.
A
.Cm <transform>
directive can then match on this action, just as it can match on any other
action.
.Pp
Operations on a
.Sy pkg
action are special in that they take place only in memory and do not directly
affect the emitted manifest.
For instance, trying to set an attribute on a
.Sy pkg
action via the
.Ic add ,
.Ic default ,
or
.Ic set
operations does not result in a
.Ic set
action being added to the manifest, though it will be available for other
.Ic <transform>
directives to match on.
Attempting to
.Ic emit
a
.Ic pkg
action causes an error.
To add a package attribute,
.Ic emit
a
.Ic set
action instead.
.Pp
The third kind of substitution is a backreference.
This substitution is not like the ones usable in the
.Ic edit
operation, but is a reference to groups listed in the transformation match on
the left-hand side of the
.Cm \&-> .
These are indicated by
.Sy %<1> ,
.Sy %<2> ,
and so on, in the order seen in the matching criteria.
.Pp
The order of processing is as follows:
.Bl -enum -offset Ds
.It
Lines are read from input files.
.It
Macros are applied.
.It
.Cm <include ...>
and
.Cm <transform>
directives are processed, causing additional files to be found and read.
.It
Once all input has been accumulated, each line in the input is converted into
actions and all transforms applied.
.It
Once processing is complete and successful, the output is written.
.El
.Sh FILES
.Bl -tag -width Ds
.It Pa /usr/share/pkg/transforms
This directory contains files with useful transforms to set facets, actuators,
and other attributes.
.El
.Sh EXIT STATUS
The following exit values are returned:
.Bl -tag -width Ds
.It 0
Everything worked.
.It 1
Something bad but anticipated happened.
.It 2
Invalid command line options were specified.
.It 99
Unexpected processing error.
.El
.Sh EXAMPLES
.Sy Example 1 No Add Tags To SMF Manifests
.Pp
Add tags to Service Management Facility
.Pq SMF
manifests so they get imported when the package is installed on a live system.
.Bd -literal -offset 4n
<transform file path=(var|lib)/svc/manifest/.*\e.xml -> \e
    add restart_fmri svc:/system/manifest-import:default>
.Ed
.Pp
.Sy Example 2 No Move Files
.Pp
Move files from
.Pa usr/sfw/bin
to
.Pa usr/bin .
.Bd -literal -offset 4n
<transform file -> edit path usr/sfw/bin usr/bin>
.Ed
.Pp
.Sy Example 3 No Specify Reboot Needed
.Pp
Add
.Cm reboot-needed
tags to files under
.Pa /kernel
that are not
.Sq .conf
files.
Note that this example leverages how transforms are applied to each action in
the order seen in the input files.
.Bd -literal -offset 4n
<transform file path=kernel/.* -> set reboot-needed true>
<transform file path=kernel/.*\e.conf -> delete reboot-needed .*>
.Ed
.Pp
This can also be done in a single transform rule with regular expressions.
.Pp
.Sy Example 4 No Convert FMRI Attribute To Depend Action
.Pp
Convert the package attribute
.Cm pkg.fmri
into a
.Ic depend
action to become part of an incorporation.
.Bd -literal -offset 4n
<transform set name=pkg.fmri -> \e
    emit depend type=incorporate fmri=%(value)>
<transform set name=pkg.fmri -> drop>
.Ed
.Pp
.Sy Example 5 No Print a List of Bug Numbers
.Pp
Print a comma-separated list of quoted and prefixed bug numbers.
.Bd -literal -offset 4n
set name=bugs value=12345 value=54321 value=13579 value=97531
<transform set name=bugs -> \e
    print %(value;sep=",";prefix="bug='";suffix="'")>
.Ed
.Pp
.Sy Example 6 No Allow For Missing Attributes
.Pp
Safely print a message even when an attribute is missing.
.Bd -literal -offset 4n
<transform driver -> print Found aliases: %(alias;notfound=<none>)>
.Ed
.Pp
.Sy Example 7 No Set Default Values
.Pp
Set default owner, group, and permission values.
.Bd -literal -offset 4n
<transform file dir -> default owner root>
<transform file dir -> default group bin>
<transform file -> default mode 0444>
<transform dir -> default mode 0755>
.Ed
.Pp
.Sy Example 8 No Add Dependencies To Packages That Are Not Marked Obsolete
.Pp
For any package that is not marked obsolete, add a dependency on the
incorporation for the consolidation that delivers the package.
This set of transforms must occur after the manifest has been read in, or the
dependency will always be emitted.
Because modifying a
.Sy pkg
action has no permanent effect, there is no need to clean up attributes
matching
.Sy pkg.obsolete=false .
.Bd -literal -offset 4n
<transform pkg -> default pkg.obsolete false>
<transform pkg pkg.obsolete=false -> emit depend \e
    fmri=consolidation/$(CONS)/$(CONS)--incorporation type=require>
.Ed
.Pp
.Sy Example 9 No Exit and Print a Message When an Error Is Found
.Pp
Error out with a message when an obsolete attribute is found in a manifest.
.Bd -literal -offset 4n
<transform file dir link hardlink opensolaris.zone=.* -> \e
    exit 1 The opensolaris.zone attribute is obsolete.>
.Ed
.Pp
.Sy Example 10 No Set the Appropriate Locale Facet
.Pp
Set the locale facet appropriate for the path name under consideration.
.Bd -literal -offset 4n
<transform dir file link hardlink path=.*/locale/([^/]+).* -> \e
    default facet.locale.%<1> true>
.Ed
.Sh INTERFACE STABILITY
The command line interface of
.Nm
is
.Sy Uncommitted .
The output of
.Nm
is
.Sy Not-An-Interface
and may change at any time.
.Sh SEE ALSO
.Xr pkg 1 ,
.Xr pkg 7
